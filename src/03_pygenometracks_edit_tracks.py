#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Created on Feb 22 18:20:44 2022
@authors: alcantar and english
"""
import argparse
import pandas as pd
import numpy as np
import glob
import os
import sys

'''
example usage (terminal):
python3 03_pygenometracks_edit_tracks.py -i ../../tn-seq_data/tn-seq_outputs/mae-005/pygenometracks_output/ -p pileup.bdg -r NGS_ref_genomes -s ../data/pyGenomeTracks_plot_settings.csv
'''

def set_new_params(track_type='single',ini_file_path=None, \
                   reference_genome_folder_name=None, \
                   pileup_file_suffix=None, \
                   params_file_path =None):

    '''
    uses a user-defined input table to modify a few useful parameters in the .ini files generated by 02_pygenometracks_make_tracks.sh
    this improves the readability and aesthetics for the pyGenomeTracks figures that are visualised in 04_pygenometracks_viz_tracks.sh
    note: the script modifies the file 'in place' and does not keep the original.
    it has been designed to handle both '*_track.ini' files that have a single sample track,
    and 'all_tracks.ini' files that have multiple sample tracks.

    PARAMETERS
    --------------------
    track_type: string
        'single' = single sample track with reference genome
        'multi' = multiple sample tracks with no reference genome
    ini_file_path: str
        directory for the *_track.ini file or 'all_tracks.ini' to be modified
    reference_genome_folder_name: str
        name of the folder in tn-seq_data that contains the reference genomes used in the alignment
        used by the scipt to identify the section in the .ini referring to the annotation of the reference genome track
    pileup_file_suffix: str
        the latter portion of the file name for the macs3 pileup files generated in 01_fastp_align_fastq.sh,
        and used in 02_pygenometracks_make_tracks.sh
        typically "macs3_treat_pileup.bdg" or "_macs3_bedcomp.bdg"
        used by the script to identify the one or more sections of the .ini file referring to the sample tracks
    params_file_path: str
        should be placed in the data folder of the repository
        path to the .csv file that contains the user-defined settings for the pre-selected parameters of input
        the file should be constructed as follows (column headings)
        to keep any of the parameters as the default, you can enter them as "none" or just write in the default value

        col 0: spacer_height                 - height of space in cm
        col 1: genome_track_height           - height of space in cm
        col 2: genome_track_color            - matplotlib color name (string)
        col 3: genome_track_labels           - 'true' or 'false' (script ensures case sensitivity is met)
        col 4: genome_track_fontsize         - fontsize in points
        col 5: genome_track_style            - style can be 'UCSC', 'flybase' or 'tssarrow' (case sensitive)
        col 6: genome_track_generows         - number of rows of genes to display
        col 7: sample_track_color            - matplotlib color name (string)
        col 8: sample_track_y_min_value      - y-axis minimum
        col 9: sample_track_y_max_value      - y-axis maximum (value, or 'auto')
        col 10: sample_track_rasterize       - reduce file size by rasterizing 'true' or 'false' (script ensures case sensitivity is met)
        col 11: sample_track_summary_method  - options are mean/average/stdev/dev/max/min/cov/coverage/sum
        col 12: sample_track_bin_number      - if summary method is chosen, then define the bin size in bp

    RETURNS
    --------------------
    ini_file: .ini file (.txt fomat)
        lines modified to replace the default settings with customisable user-defined alternatives

    '''

    # check that all the input files are there
    if (ini_file_path==None or reference_genome_folder_name==None or pileup_file_suffix==None or params_file_path ==None):
        sys.exit('Missing input argument')

    # read in the parameter table
    param_table = pd.read_csv(params_file_path, sep='\t')

    # unpack params
    spacer_height = str(param_table['spacer_height'][0]) # height of space in cm
    genome_track_height = str(param_table['genome_track_height'][0]) # height of space in cm
    genome_track_color = str(param_table['genome_track_color'][0]) # matplotlib color name (string)
    genome_track_labels = str(param_table['genome_track_labels'][0]).lower() # 'true' or 'false' (case sensitive)
    genome_track_fontsize = str(param_table['genome_track_fontsize'][0]) # fontsize in points
    genome_track_style = str(param_table['genome_track_style'][0]) # style can be 'UCSC', 'flybase' or 'tssarrow' (case sensitive)
    genome_track_generows = str(param_table['genome_track_generows'][0]) # number of rows of genes to display
    sample_track_color = str(param_table['sample_track_color'][0]) # matplotlib color name (string)
    sample_track_y_min_value = str(param_table['sample_track_y_min_value'][0]) # y-axis minimum
    sample_track_y_max_value = str(param_table['sample_track_y_max_value'][0]) # y-axis maximum (value, or 'auto')
    sample_track_rasterize = str(param_table['sample_track_rasterize'][0]).lower() # reduce file size by rasterizing 'true' or 'false' (case sensitive)
    sample_track_summary_method = str(param_table['sample_track_summary_method'][0]).lower() # mean/average/stdev/dev/max/min/cov/coverage/sum
    sample_track_bin_number = str(param_table['sample_track_bin_number'][0]) # if summary method is chose, then define the bin size in bp

    # check for typos in the genome track style input
    if (genome_track_style!='UCSC' and genome_track_style!='flybase' and genome_track_style!='tssarrow'):
        sys.exit('The genome track style "'+genome_track_style+'" is not one of the recognised inputs')
    # check if the summary method is allowed
    if (sample_track_summary_method!='mean' and sample_track_summary_method!='average' and sample_track_summary_method!='stdev' \
       and sample_track_summary_method!='dev' and sample_track_summary_method!='max' and sample_track_summary_method!='min' \
       and sample_track_summary_method!='cov' and sample_track_summary_method!='coverage' and sample_track_summary_method!='sum' \
       and sample_track_summary_method!='none'):
        sys.exit('The genome track summary method "'+sample_track_summary_method+'" is not one of the recognised inputs')

    # record the position of lines that specify the plot titles of the different types of track
    titles = [] # records the titles present
    title_positions = [] # records their line number positions
    lines = [] # to store all the lines of the .ini file
    sample_track_titles = [] # to store all the titles for the plots generated from the input file names

    if track_type=='single':
        start_reference_bedfile_index = 0
    if track_type=='multi':
        start_reference_bedfile_indices = []

    # iterate through the lines of the .ini file and get the positions and contents of the lines that define the different sections
    with open(ini_file_path) as f:
        lines = f.readlines()
        start_reference_bedfile_index = 0
        # Get the position of the start of the section for the reference genome bedfile:
        count = 0
        count_sample_tracks = 0
        for line in lines:
            count += 1
            if (reference_genome_folder_name in line or 'intersect_genome.bed' in line):
                if track_type=='single':
                    start_reference_bedfile_index = count
                    genome_track_title =  line.split("/")[-2]
                    print("The reference genome for the genome track is " + genome_track_title)
                    print("The line with the genome index bedfile is "+str(start_reference_bedfile_index))
                if track_type=='multi':
                    genome_track_title =  'Genome intersection'
                    start_reference_bedfile_indices.append(count)
            if pileup_file_suffix in line:
                count_sample_tracks += 1
                sample_track_title_paths =  line.split("/")[-1]
                sample_track_title = 'Sample '+sample_track_title_paths.split("_")[0]
                sample_track_titles.append(sample_track_title)
                print('Detected track for '+sample_track_title)
                titles.append(lines[count+2])
                title_positions.append(count+2)
        list_of_lines = lines
    f.close()

    # Check that the .ini file has the expected contents before trying to modify it
    if track_type=='single':
        if start_reference_bedfile_index ==0:
            sys.exit('ERROR:Cound not find a line that mentions the reference genome. Check folder name matches.')
    elif track_type=='multi':
        if len(start_reference_bedfile_indices)==0:
            sys.exit('ERROR:Cound not find a line that mentions the genome intersection. Check folder name matches.')

    if count_sample_tracks == 0:
        sys.exit('ERROR: check that the pileup file suffix is entered correctly')

    print('There are a total of %s sample tracks in this .ini file' %count_sample_tracks)

    ######## Genome track
    if track_type=='single':
        # change height:
        if spacer_height != 'none':
            list_of_lines[start_reference_bedfile_index-5] = "height = "+str(spacer_height)+"\n"

        # change title:
        if genome_track_title != 'none':
            list_of_lines[start_reference_bedfile_index+2] = "title = "+str(genome_track_title)+"\n"

        # change genome track height
        if genome_track_height != 'none':
            list_of_lines[start_reference_bedfile_index+4] = "height = "+str(genome_track_height)+"\n"

        # change genome track colour
        if genome_track_color != 'none':
            if genome_track_color == 'color = bed_rgb':
                list_of_lines[start_reference_bedfile_index+17] = "color = bed_rgb\n"
                list_of_lines[start_reference_bedfile_index+26] = "#color = "+str(genome_track_color)+"\n"
            else:
                list_of_lines[start_reference_bedfile_index+26] = "color = "+str(genome_track_color)+"\n"
                list_of_lines[start_reference_bedfile_index+17] = "#color = bed_rgb\n"

        # change genome track lable settings
        if genome_track_labels != 'none':
            list_of_lines[start_reference_bedfile_index+28] = "labels = "+str(genome_track_labels)+"\n"

        # change genome track fontsize
        if genome_track_fontsize != 'none':
            list_of_lines[start_reference_bedfile_index+34] = "fontsize = "+str(genome_track_fontsize)+"\n"

        # change genome track style
        if genome_track_style != 'none':
            if genome_track_style == 'flybase':
                list_of_lines[start_reference_bedfile_index+48] = "#style = UCSC\n"
                list_of_lines[start_reference_bedfile_index+49] = "style = "+str(genome_track_style)+"\n"
                list_of_lines[start_reference_bedfile_index+50] = "#style = tssarrow\n"
            elif genome_track_style == 'UCSC':
                list_of_lines[start_reference_bedfile_index+48] = "style = "+str(genome_track_style)+"\n"
                list_of_lines[start_reference_bedfile_index+49] = "#style = flybase\n"
                list_of_lines[start_reference_bedfile_index+50] = "#style = tssarrow\n"
            elif genome_track_style == 'tssarrow':
                list_of_lines[start_reference_bedfile_index+48] = "#style = UCSC\n"
                list_of_lines[start_reference_bedfile_index+49] = "#style = flybase\n"
                list_of_lines[start_reference_bedfile_index+50] = "style = "+str(genome_track_style)+"\n"

        # change genome track generow number
        if genome_track_generows != 'none':
            list_of_lines[start_reference_bedfile_index+56] = "gene_rows = "+str(genome_track_generows)+"\n"




    if track_type=='multi':
        for title_line_number in start_reference_bedfile_indices:
            # change height:
            if spacer_height != 'none':
                list_of_lines[title_line_number-5] = "height = "+str(spacer_height)+"\n"

            # change title:
            if genome_track_title != 'none':
                list_of_lines[title_line_number+2] = "title = "+str(genome_track_title)+"\n"

            # change genome track height
            if genome_track_height != 'none':
                list_of_lines[title_line_number+4] = "height = "+str(genome_track_height)+"\n"

            # change genome track colour
            if genome_track_color != 'none':
                if genome_track_color == 'color = bed_rgb':
                    list_of_lines[title_line_number+17] = "color = bed_rgb\n"
                    list_of_lines[title_line_number+26] = "#color = "+str(genome_track_color)+"\n"
                else:
                    list_of_lines[title_line_number+26] = "color = "+str(genome_track_color)+"\n"
                    list_of_lines[title_line_number+17] = "#color = bed_rgb\n"



            # change genome track lable settings
            if genome_track_labels != 'none':
                list_of_lines[title_line_number+28] = "labels = "+str(genome_track_labels)+"\n"

            # change genome track fontsize
            if genome_track_fontsize != 'none':
                list_of_lines[title_line_number+34] = "fontsize = "+str(genome_track_fontsize)+"\n"

            # change genome track style
            if genome_track_style != 'none':
                if genome_track_style == 'flybase':
                    list_of_lines[title_line_number+48] = "#style = UCSC\n"
                    list_of_lines[title_line_number+49] = "style = "+str(genome_track_style)+"\n"
                    list_of_lines[title_line_number+50] = "#style = tssarrow\n"
                elif genome_track_style == 'UCSC':
                    list_of_lines[title_line_number+48] = "style = "+str(genome_track_style)+"\n"
                    list_of_lines[title_line_number+49] = "#style = flybase\n"
                    list_of_lines[title_line_number+50] = "#style = tssarrow\n"
                elif genome_track_style == 'tssarrow':
                    list_of_lines[title_line_number+48] = "#style = UCSC\n"
                    list_of_lines[title_line_number+49] = "#style = flybase\n"
                    list_of_lines[title_line_number+50] = "style = "+str(genome_track_style)+"\n"

            # change genome track generow number
            if genome_track_generows != 'none':
                list_of_lines[start_reference_bedfile_index+56] = "gene_rows = "+str(genome_track_generows)+"\n"






    ######## Sample tracks
    # check that the number of new titles matches the number of existing titles:if sample_track_titles != 'none':
        if count_sample_tracks == len(sample_track_titles):
            print('Good news: the number of sample track titles matches the number of new titles you have provided')
        else:
            sys.exit('ERROR: The number of sample track titles does not match the number of new titles you have provided')


    # iterate throught the rows of the .txt file that contain sample tracks, and add new features relative to the start of each one
    new_title_count = 0
    for title_line_number in title_positions:

        if sample_track_titles != 'none':
            list_of_lines[title_line_number] = "title = "+str(sample_track_titles[new_title_count])+"\n"
            new_title_count += 1

        if sample_track_color != 'none':
            list_of_lines[title_line_number+10] = "color = "+str(sample_track_color)+"\n"

        if sample_track_y_min_value != 'none':
            list_of_lines[title_line_number+18] = "min_value = "+str(sample_track_y_min_value)+"\n"

        if sample_track_y_max_value != 'none':
            list_of_lines[title_line_number+19] = "max_value = "+str(sample_track_y_max_value)+"\n"

        if (sample_track_rasterize == 'true' and sample_track_summary_method == 'none'):
            list_of_lines[title_line_number+38] = "rasterize = "+str(sample_track_rasterize)+"\n"
            list_of_lines[title_line_number+42] = "#summary_method = mean\n"
            list_of_lines[title_line_number+43] = "#number_of_bins = 700\n"

        if (sample_track_rasterize == 'false' and sample_track_summary_method != 'none'):
            list_of_lines[title_line_number+38] = "#rasterize = false\n"
            list_of_lines[title_line_number+42] = "summary_method = "+str(sample_track_summary_method)+"\n"
            list_of_lines[title_line_number+43] = "number_of_bins = "+str(sample_track_bin_number)+"\n"

        if (sample_track_rasterize == 'false' and sample_track_summary_method == 'none'):
            list_of_lines[title_line_number+38] = "#rasterize = false\n"
            list_of_lines[title_line_number+42] = "#summary_method = mean\n"
            list_of_lines[title_line_number+43] = "#number_of_bins = 700\n"

    #print(list_of_lines)
    ini_file = open(ini_file_path, "w")
    ini_file.writelines(list_of_lines)
    ini_file.close()



def get_all_active_params(ini_file_path=None, \
                          pileup_file_suffix=None):
    # Display all of the lines that have a customisable setting:

    lines = []
    with open(ini_file_path) as f:
        lines = f.readlines()

    count_sample_tracks = 0
    count = 0
    for line in lines:
        count += 1
        if pileup_file_suffix in line:
            count_sample_tracks += 1
            print('------------------------------ new sample track ------------------------------')
        if ('=' in line and '#' not in line):
            print(f'line {count}: {line}')

    print('There are a total of %s sample tracks in this .ini file' %count_sample_tracks)
    if count_sample_tracks == 0:
        print('ERROR: check that the pileup file suffix is entered correctly')
    f.close()



def get_current_genometrack_params(ini_file_path=None, \
                                   reference_genome_folder_name=None):

    lines = []
    with open(ini_file_path) as f:
        lines = f.readlines()
    start_reference_bedfile_index = 0
    # Get the position of the start of the section for the reference genome bedfile:
    count = 0
    for line in lines:
        count += 1
        if reference_genome_folder_name in line:
            #print(f'line {count}: {line}')
            start_reference_bedfile_index = count
            break

    if start_reference_bedfile_index ==0:
        print('Cound not find a line that mentions the reference genome. Check folder name matches.')
    else:

        # Output current settings for the genome bedfile section:
        print('The current TITLE for the genome track is', f'line {start_reference_bedfile_index+3}: {lines[start_reference_bedfile_index+2]}')
        print('The current HEIGHT setting for the genome track is', f'line {start_reference_bedfile_index+5}:{lines[start_reference_bedfile_index+4]}')
        print('The current COLOR setting for the genome track is', f'line {start_reference_bedfile_index+27}: {lines[start_reference_bedfile_index+26]}')
        print('The current LABLE setting for the genome track is', f'line {start_reference_bedfile_index+29}: {lines[start_reference_bedfile_index+28]}')
        print('The current FONTSIZE setting for the genome track is', f'line {start_reference_bedfile_index+35}: {lines[start_reference_bedfile_index+34]}')
        print('The current STYLE setting for the genome track is', f'line {start_reference_bedfile_index+50}: {lines[start_reference_bedfile_index+49]}')
        print('The current GENEROWS setting for the genome track is', f'line {start_reference_bedfile_index+57}: {lines[start_reference_bedfile_index+56]}')

    f.close()


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', help='directory containing _track.ini files for each sample')
    parser.add_argument('-p', help='suffix for the pileup files used to make the pyGenomeTrack e.g. pileup.bdg')
    parser.add_argument('-r', help='reference genome folder name e.g. NGS_ref_genomes')
    parser.add_argument('-s', help='path to the user defined plot settings for pyGenomeTracks')
    args = parser.parse_args()

    path_to_ini=args.i
    pileup_file_suffix=args.p
    reference_genome_folder_name=args.r
    settings_file=args.s

    ini_files = glob.glob(path_to_ini + '*_track_bedcomp.ini')

    for sample_file in ini_files:
        ini_file_path = sample_file
        print('_________________________________________ STARTING GENOME TRACK PARAMETERS ____________________________________')
        get_current_genometrack_params(ini_file_path, reference_genome_folder_name)
        set_new_params('single',ini_file_path, reference_genome_folder_name,pileup_file_suffix,settings_file)
        print('_________________________________________ FINAL OUTPUT: ALL ACTIVE PARAMETERS ____________________________________')
        get_all_active_params(ini_file_path,pileup_file_suffix)

    ini_multi_track_files = glob.glob(path_to_ini + '*_tracks.ini')
    for sample_multi_file in ini_multi_track_files:
        ini_multi_file_path = sample_multi_file
        print('_________________________________________ FOUND A MULTI-TRACK FILE ____________________________________')
        set_new_params('multi',ini_multi_file_path, reference_genome_folder_name,pileup_file_suffix,settings_file)
        get_all_active_params(ini_multi_file_path,pileup_file_suffix)
        print('_________________________________________ EDITED A MULTI-TRACK FILE ____________________________________')

main()
